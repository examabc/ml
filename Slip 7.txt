Slip 7 :
 
Q.1.	Fit the simple linear regression model to Salary_positions.csv data. Predict the sa of level 11 and level 12 employees


import pandas as pd import numpy as np
from sklearn.linear_model import LinearRegression import matplotlib.pyplot as plt

# Step 1: Load the dataset

# Assuming Salary_positions.csv has columns 'Level' and 'Salary' data = pd.read_csv('Salary_positions.csv')

# Step 2: Preprocess the data # Inspect the data (optional) print(data.head())

# Extracting the relevant columns

X = data[['Level']] # Independent variable (employee level) y = data['Salary']	# Dependent variable (salary)

# Step 3: Fit the Simple Linear Regression Model model = LinearRegression()
 
model.fit(X, y)


# Step 4: Predict salary for level 11 and level 12 employees

levels = np.array([11, 12]).reshape(-1, 1) # Reshape to match the model's input format

predictions = model.predict(levels)


# Output the predictions

print(f"Predicted salary for level 11 employee: ${predictions[0]:,.2f}") print(f"Predicted salary for level 12 employee: ${predictions[1]:,.2f}")

# Step 5: Plot the data and the regression line plt.scatter(X, y, color='blue') # Plot the actual data points
plt.plot(X, model.predict(X), color='red') # Plot the regression line plt.title('Salary vs Level')
plt.xlabel('Employee Level') plt.ylabel('Salary') plt.show()


Q.2.	Write a python program to implement Naive Bayes on weather forecast dataset. [15 M]


# Import necessary libraries import pandas as pd
 
from sklearn.model_selection import train_test_split from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score from sklearn.preprocessing import LabelEncoder

# Step 1: Load the dataset
# Assuming the dataset is in CSV format data = pd.read_csv('weather_forecast.csv')

# Step 2: Preprocess the data
# Convert categorical features into numeric using LabelEncoder label_encoder = LabelEncoder()

# Encoding categorical features
data['Temperature'] = label_encoder.fit_transform(data['Temperature']) data['Humidity'] = label_encoder.fit_transform(data['Humidity']) data['Wind'] = label_encoder.fit_transform(data['Wind']) data['Outlook'] = label_encoder.fit_transform(data['Outlook'])

# Encoding the target label
data['PlayTennis'] = label_encoder.fit_transform(data['PlayTennis'])

# Step 3: Split the data into features (X) and target (y)
X = data.drop('PlayTennis', axis=1) # Features y = data['PlayTennis'] # Target label

# Step 4: Split the dataset into training and testing sets (80% train, 20% test) X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 5: Apply Naive Bayes Model (GaussianNB) model = GaussianNB() # Using Gaussian Naive Bayes model.fit(X_train, y_train) # Train the model

# Step 6: Make predictions on the test set y_pred = model.predict(X_test)

# Step 7: Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy of the Naive Bayes model: {accuracy * 100:.2f}%')
 
# Step 8: Make a sample prediction (e.g., a sunny day with weak wind, high humidity) sample = pd.DataFrame({'Temperature': [label_encoder.transform(['Mild'])[0]],
'Humidity': [label_encoder.transform(['High'])[0]], 'Wind': [label_encoder.transform(['Weak'])[0]],
'Outlook': [label_encoder.transform(['Sunny'])[0]]})

prediction = model.predict(sample)
prediction_label = label_encoder.inverse_transform(prediction) print(f'Prediction for the sample: {prediction_label[0]}')
