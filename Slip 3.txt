Slip 3 :
 
Q.1.	Write a python program to implement multiple Linear Regression for a house price dataset. Divide the dataset into training and testing data.


import pandas as pd

from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score


# Step 1: Load the dataset

# Replace 'house_prices.csv' with the actual path to your dataset data = pd.read_csv('house_prices.csv')

# Display the first few rows of the dataset to understand its structure print("First few rows of the dataset:")
print(data.head())


# Step 2: Data Preprocessing

# Check for any null values and handle them print("\nChecking for null values:") print(data.isnull().sum())

# Drop rows with any missing values
 
data = data.dropna()


# Select features and target variable

# Assume the dataset contains columns like 'SquareFootage', 'Bedrooms', 'Bathrooms', and 'Price'

# Adjust these column names based on the actual dataset

features = ['SquareFootage', 'Bedrooms', 'Bathrooms'] # Independent variables X = data[features]
y = data['Price'] # Dependent variable


# Step 3: Split the data into training and testing sets

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


# Step 4: Create and train the Multiple Linear Regression model model = LinearRegression()
model.fit(X_train, y_train)


# Step 5: Make predictions on the test set y_pred = model.predict(X_test)

# Step 6: Evaluate the model

mse = mean_squared_error(y_test, y_pred)
 
r2 = r2_score(y_test, y_pred)


print(f"\nMean Squared Error: {mse}") print(f"R-squared: {r2}")

# Display the model's coefficients and intercept print("\nModel Coefficients:")
for feature, coef in zip(features, model.coef_): print(f"{feature}: {coef}")
print(f"Intercept: {model.intercept_}")


# Step 7: Test a sample prediction (optional)

sample_input = [[2000, 3, 2]] # Example: 2000 sqft, 3 bedrooms, 2 bathrooms predicted_price = model.predict(sample_input)
print(f"\nPredicted Price for {sample_input[0]}: {predicted_price[0]}")



Q.2.	Use dataset crash.csv is an accident survivorâ€™s dataset portal for USA hosted by data.gov. The dataset contains passengers age and speed of vehicle (mph) at the time of impact and fate of passengers (1 for survived and 0 for not survived) after a crash. use logistic regression to decide if the age and speed can predict the survivability of the passengers.


import pandas as pd
from sklearn.model_selection import train_test_split
 
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# Step 1: Load the dataset
# Replace 'crash.csv' with the actual path to your dataset data = pd.read_csv('crash.csv')

# Display the first few rows of the dataset print("First few rows of the dataset:") print(data.head())

# Step 2: Data Preprocessing
# Check for null values and handle them if any print("\nChecking for null values:") print(data.isnull().sum())

# Drop rows with any missing values data = data.dropna()

# Step 3: Define features and target variable
# Assuming columns are named 'age', 'speed' for vehicle speed, and 'fate' for survivability
X = data[['age', 'speed']] # Features: age and speed
y = data['fate']	# Target: 1 for survived, 0 for not survived

# Step 4: Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 5: Create and train the Logistic Regression model model = LogisticRegression()
model.fit(X_train, y_train)

# Step 6: Make predictions on the test set y_pred = model.predict(X_test)

# Step 7: Evaluate the model
accuracy = accuracy_score(y_test, y_pred) conf_matrix = confusion_matrix(y_test, y_pred) class_report = classification_report(y_test, y_pred)
 
print(f"\nModel Accuracy: {accuracy:.2f}") print("\nConfusion Matrix:") print(conf_matrix)
print("\nClassification Report:") print(class_report)

# Display model coefficients to understand feature influence print("\nModel Coefficients:")
print(f"Age Coefficient: {model.coef_[0][0]}") print(f"Speed Coefficient: {model.coef_[0][1]}") print(f"Intercept: {model.intercept_[0]}")
