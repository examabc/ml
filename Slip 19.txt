Slip 19 :


Q.1.	Fit the simple linear regression and polynomial linear regression models to Salary_positions.csv data. Find which one is more accurately fitting to the given data.
Also predict the salaries of level 11 and level 12 employees


# Import necessary libraries import numpy as np
import pandas as pd

import matplotlib.pyplot as plt

from sklearn.linear_model import LinearRegression from sklearn.preprocessing import PolynomialFeatures from sklearn.metrics import mean_squared_error

# Step 1: Load the Salary Positions Dataset

df = pd.read_csv('Salary_positions.csv') # Make sure the CSV file is in the correct directory


# Step 2: Preprocess the Data
 
X = df['Position Level'].values.reshape(-1, 1) # Independent variable (Position Level) y = df['Salary'].values # Dependent variable (Salary)

# Step 3: Simple Linear Regression simple_linear_reg = LinearRegression() simple_linear_reg.fit(X, y)

# Step 4: Polynomial Linear Regression

poly = PolynomialFeatures(degree=4) # 4th degree polynomial features X_poly = poly.fit_transform(X)
poly_linear_reg = LinearRegression() poly_linear_reg.fit(X_poly, y)

# Step 5: Evaluate the Models using Mean Squared Error (MSE) y_pred_simple = simple_linear_reg.predict(X)
y_pred_poly = poly_linear_reg.predict(X_poly)


mse_simple = mean_squared_error(y, y_pred_simple) mse_poly = mean_squared_error(y, y_pred_poly)

print(f"Mean Squared Error for Simple Linear Regression: {mse_simple}") print(f"Mean Squared Error for Polynomial Linear Regression: {mse_poly}")
 


# Step 6: Predict salaries for Level 11 and Level 12 using both models level_11 = np.array([[11]])
level_12 = np.array([[12]])


# Simple Linear Regression Predictions salary_11_simple = simple_linear_reg.predict(level_11) salary_12_simple = simple_linear_reg.predict(level_12)

# Polynomial Linear Regression Predictions

salary_11_poly = poly_linear_reg.predict(poly.transform(level_11)) salary_12_poly = poly_linear_reg.predict(poly.transform(level_12))

print(f"Predicted Salary for Level 11 (Simple Linear Regression):
{salary_11_simple[0]}")

print(f"Predicted Salary for Level 12 (Simple Linear Regression):
{salary_12_simple[0]}")


print(f"Predicted Salary for Level 11 (Polynomial Linear Regression):
{salary_11_poly[0]}")

print(f"Predicted Salary for Level 12 (Polynomial Linear Regression):
{salary_12_poly[0]}")


# Step 7: Visualize the Results
 
# Plotting Simple Linear Regression results plt.scatter(X, y, color='blue')
plt.plot(X, y_pred_simple, color='red') plt.title('Simple Linear Regression') plt.xlabel('Position Level') plt.ylabel('Salary')
plt.show()


# Plotting Polynomial Linear Regression results plt.scatter(X, y, color='blue')
X_grid = np.arange(min(X), max(X), 0.1) # To create a smooth curve X_grid = X_grid.reshape((len(X_grid), 1))
plt.plot(X_grid, poly_linear_reg.predict(poly.transform(X_grid)), color='red') plt.title('Polynomial Linear Regression')
plt.xlabel('Position Level') plt.ylabel('Salary') plt.show()

Q.2.	Write a python program to implement Naive Bayes on weather forecast dataset. # Import necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score, classification_report
 

# Step 1: Load the Weather Forecast Dataset
# Assuming the dataset is in CSV format with features like 'Temperature', 'Humidity', 'Wind', and target 'Rain'
df = pd.read_csv('weather_forecast.csv') # Replace with your dataset path

# Step 2: Preprocess the Data # Check for missing values print(df.isnull().sum())

# Encode categorical variables (if any)
# For example, if 'Rain' is a categorical variable (Yes/No), we can encode it as 1 (Yes) and 0 (No)
df['Rain'] = df['Rain'].map({'Yes': 1, 'No': 0})

# Separate features and target
X = df.drop('Rain', axis=1) # Features (Temperature, Humidity, Wind, etc.) y = df['Rain'] # Target variable

# Step 3: Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Step 4: Train the Naive Bayes model nb_model = GaussianNB() nb_model.fit(X_train, y_train)

# Step 5: Make predictions
y_pred = nb_model.predict(X_test)

# Step 6: Evaluate the model
accuracy = accuracy_score(y_test, y_pred) print(f"Accuracy: {accuracy * 100:.2f}%")

# Print classification report print("Classification Report:") print(classification_report(y_test, y_pred))
