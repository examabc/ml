Slip 16 :


Q.1.	Create a two layered neural network with relu and sigmoid activation function. [15 M]


# Import necessary libraries import numpy as np
 
from tensorflow.keras.models import Sequential from tensorflow.keras.layers import Dense
from tensorflow.keras.optimizers import Adam from sklearn.model_selection import train_test_split from sklearn.datasets import make_classification from sklearn.preprocessing import StandardScaler

# Step 1: Create a simple binary classification dataset

X, y = make_classification(n_samples=1000, n_features=20, n_informative=10, n_classes=2, random_state=42)


# Step 2: Split data into training and testing sets

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


# Step 3: Standardize the data scaler = StandardScaler()
X_train = scaler.fit_transform(X_train) X_test = scaler.transform(X_test)

# Step 4: Build the neural network model model = Sequential()
 
# First layer (Hidden Layer): Using ReLU activation model.add(Dense(64, input_dim=X_train.shape[1], activation='relu'))

# Second layer (Output Layer): Using Sigmoid activation for binary classification model.add(Dense(1, activation='sigmoid'))

# Step 5: Compile the model model.compile(loss='binary_crossentropy', # For binary classification
optimizer=Adam(learning_rate=0.001), # Optimizer with learning rate metrics=['accuracy'])

# Step 6: Train the model

history = model.fit(X_train, y_train, epochs=50, batch_size=32, validation_data=(X_test, y_test))


# Step 7: Evaluate the model

loss, accuracy = model.evaluate(X_test, y_test) print(f"Test Loss: {loss}")
print(f"Test Accuracy: {accuracy}")


# Step 8: Make predictions (Example) predictions = model.predict(X_test[:5])
 
print("Predictions for the first 5 samples:", predictions)



Q.2.	Write a python program to implement Simple Linear Regression for Boston housing dataset.


# Import necessary libraries import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import load_boston
from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Step 1: Load the Boston Housing dataset boston = load_boston()
X = boston.data y = boston.target

# Step 2: Select a single feature (e.g., number of rooms 'RM')
X_rm = X[:, 5].reshape(-1, 1) # 'RM' is the 6th column in the dataset

# Step 3: Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_rm, y, test_size=0.2, random_state=42)

# Step 4: Create and train the linear regression model model = LinearRegression()
model.fit(X_train, y_train)

# Step 5: Make predictions on the test set y_pred = model.predict(X_test)

# Step 6: Calculate performance metrics
mse = mean_squared_error(y_test, y_pred) # Mean Squared Error r2 = r2_score(y_test, y_pred) # R-squared value

# Print the performance metrics
 
print(f"Mean Squared Error: {mse}") print(f"R-squared: {r2}")

# Step 7: Visualize the regression line
plt.scatter(X_test, y_test, color='blue', label='Actual Data') plt.plot(X_test, y_pred, color='red', label='Regression Line') plt.xlabel('Number of Rooms (RM)')
plt.ylabel('House Price')
plt.title('Simple Linear Regression: House Price vs. Number of Rooms') plt.legend()
plt.show()
