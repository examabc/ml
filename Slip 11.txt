Slip 11 :

Q.1.	Write a python program to implement Polynomial Regression for Boston Housing Dataset


# Import necessary libraries import numpy as np
 
import pandas as pd

import matplotlib.pyplot as plt

from sklearn.datasets import load_boston

from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression from sklearn.preprocessing import PolynomialFeatures
from sklearn.metrics import mean_squared_error, r2_score


# Step 1: Load the Boston Housing Dataset boston = load_boston()
X = boston.data # Features (e.g., crime rate, property tax, etc.) y = boston.target # Target variable (house price)

# Step 2: Preprocess the data

# We can split the data into training and testing sets (80% training, 20% testing)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


# Step 3: Polynomial Feature Transformation

# We'll use PolynomialFeatures to create polynomial features from the original data degree = 2 # You can experiment with different degrees (e.g., 3, 4)
poly = PolynomialFeatures(degree=degree)
 


# Transform the features to include polynomial terms X_train_poly = poly.fit_transform(X_train) X_test_poly = poly.transform(X_test)

# Step 4: Fit the Linear Regression Model

# Now we can apply linear regression to the polynomial features model = LinearRegression()
model.fit(X_train_poly, y_train)


# Step 5: Evaluate the model # Predict on the test data
y_pred = model.predict(X_test_poly)


# Calculate the mean squared error and R-squared score mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)


print(f'Mean Squared Error (MSE): {mse}') print(f'R-Squared: {r2}')

# Step 6: Visualize the results (optional, works best with one feature)
 
# Since the dataset is multi-dimensional, we'll plot predictions vs actual values plt.scatter(y_test, y_pred)
plt.xlabel('True Values (Prices)') plt.ylabel('Predicted Values (Prices)')
plt.title('Polynomial Regression: Predicted vs Actual') plt.show()


Q.2.	Write a python program to Implement Decision Tree classifier model on Data which is extracted from images that were taken from genuine and forged banknote- like specimens. (refer UCI dataset https://archive.ics.uci.edu/dataset/267/banknote+authentication)

# Import necessary libraries import pandas as pd
from sklearn.model_selection import train_test_split from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, classification_report import urllib.request

# Step 1: Load the Banknote Authentication Dataset
url = "https://archive.ics.uci.edu/ml/machine-learning-databases/00267/data.csv" # Download and load the dataset directly from the UCI repository
filename = "banknote-authentication.csv" urllib.request.urlretrieve(url, filename)

# Read the dataset into a pandas dataframe df = pd.read_csv(filename, header=None)

# Step 2: Preprocess the data
# The dataset has no column names, so let's manually assign them df.columns = ['Variance', 'Skewness', 'Curtosis', 'Entropy', 'Class']

# Step 3: Split the data into features (X) and target (y)
X = df.drop(columns='Class') # Features (all columns except 'Class')
 
y = df['Class'] # Target ('Class' column, where 0 = forged, 1 = genuine)

# Step 4: Split the data into training and testing sets (80% train, 20% test) X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 5: Train the Decision Tree Classifier model model = DecisionTreeClassifier(random_state=42) model.fit(X_train, y_train)

# Step 6: Make predictions on the test data y_pred = model.predict(X_test)

# Step 7: Evaluate the model
accuracy = accuracy_score(y_test, y_pred) print(f'Accuracy: {accuracy:.2f}')

# Print detailed classification report print("Classification Report:") print(classification_report(y_test, y_pred))


