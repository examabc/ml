Slip 24 :
 


Q.1.	Write a python program to Implement Decision Tree classifier model on Data which is extracted from images that were taken from genuine and forged banknote- like specimens. (refer UCI dataset https://archive.ics.uci.edu/dataset/267/banknote+authentication)


import pandas as pd

from sklearn.model_selection import train_test_split from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, classification_report from sklearn.preprocessing import StandardScaler

# Step 1: Load the dataset

# URL of the dataset from UCI repository (or local file path)

url = "https://archive.ics.uci.edu/ml/machine-learning- databases/00267/data_banknote_authentication.csv"

column_names = ['variance', 'skewness', 'curtosis', 'entropy', 'class']


# Load the dataset into a pandas DataFrame data = pd.read_csv(url, names=column_names)

# Step 2: Preprocess the data # Checking for null values
print("Checking for null values:")
 
print(data.isnull().sum()) # Should be zero for all columns


# Split the data into features (X) and target (y)

X = data.drop('class', axis=1) # Features (all columns except 'class') y = data['class'] # Target (the 'class' column)

# Split the data into training and testing sets (80% training, 20% testing)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


# Step 3: Standardize the features (optional but recommended for tree models) scaler = StandardScaler()
X_train = scaler.fit_transform(X_train) X_test = scaler.transform(X_test)

# Step 4: Train the Decision Tree Classifier model dt_classifier = DecisionTreeClassifier(random_state=42) dt_classifier.fit(X_train, y_train)

# Step 5: Make predictions

y_pred = dt_classifier.predict(X_test)
 
# Step 6: Evaluate the model

accuracy = accuracy_score(y_test, y_pred)

print(f"\nAccuracy of Decision Tree Classifier: {accuracy * 100:.2f}%")


# Classification report for more detailed metrics print("\nClassification Report:") print(classification_report(y_test, y_pred))



Q.2.	Write a python program to implement linear SVM using UniversalBank.csv. [15 M]


import pandas as pd

from sklearn.model_selection import train_test_split from sklearn.svm import SVC
from sklearn.preprocessing import StandardScaler

from sklearn.metrics import accuracy_score, classification_report


# Step 1: Load the dataset

# Assuming 'UniversalBank.csv' is located in the same directory

url = 'UniversalBank.csv' # Replace with the actual file path or URL data = pd.read_csv(url)
 


# Step 2: Preprocess the data

# Check the first few rows of the dataset print("First few rows of the dataset:") print(data.head())

# Checking for null values print("\nChecking for null values:") print(data.isnull().sum())

# Dropping any rows with missing values (if any) data = data.dropna()

# Assume the target variable is 'PersonalLoan' and the rest are features X = data.drop(columns=['PersonalLoan']) # Features
y = data['PersonalLoan'] # Target variable (whether the customer took a loan)


# Encode categorical variables (if any)

# For example, if you have 'education' column or 'zip code', convert them to numeric

X = pd.get_dummies(X, drop_first=True) # Convert categorical features to numerical if necessary
 
# Step 3: Split the dataset into training and testing sets

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


# Step 4: Standardize the data (Scaling the features) scaler = StandardScaler()
X_train = scaler.fit_transform(X_train) X_test = scaler.transform(X_test)

# Step 5: Train the Linear SVM model

svm_model = SVC(kernel='linear', random_state=42) # Using linear kernel svm_model.fit(X_train, y_train)

# Step 6: Make predictions

y_pred = svm_model.predict(X_test)


# Step 7: Evaluate the model

accuracy = accuracy_score(y_test, y_pred) print(f"\nAccuracy of Linear SVM: {accuracy * 100:.2f}%")

# Classification report for more detailed metrics print("\nClassification Report:")
 
print(classification_report(y_test, y_pred))
