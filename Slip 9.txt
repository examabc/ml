Slip 9 :


Q.1.	Implement Ridge Regression and Lasso regression model using boston_houses.csv and take only ‘RM’ and ‘Price’ of the houses. Divide the data as training and testing data. Fit line using Ridge regression and to find price of a house if it contains 5 rooms and compare results.


# Import necessary libraries import pandas as pd
import numpy as np

from sklearn.model_selection import train_test_split from sklearn.linear_model import Ridge, Lasso from sklearn.metrics import mean_squared_error

# Step 1: Load the Boston Housing dataset from sklearn from sklearn.datasets import load_boston

# Load the dataset boston = load_boston()
df = pd.DataFrame(boston.data, columns=boston.feature_names)
 
# Step 2: Select only the 'RM' (average number of rooms) and 'Price' (house price) columns

df = df[['RM']]

df['Price'] = boston.target


# Step 3: Split the data into training and testing sets X = df[['RM']] # Features (number of rooms)
y = df['Price'] # Target (house price)


# Split the dataset into 80% training data and 20% testing data

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


# Step 4: Train Ridge Regression model

ridge_regressor = Ridge(alpha=1.0) # Alpha is the regularization strength ridge_regressor.fit(X_train, y_train)

# Step 5: Train Lasso Regression model

lasso_regressor = Lasso(alpha=0.1) # Alpha is the regularization strength lasso_regressor.fit(X_train, y_train)

# Step 6: Predict house prices for both models y_pred_ridge = ridge_regressor.predict(X_test)
 
y_pred_lasso = lasso_regressor.predict(X_test)


# Step 7: Compare the models' performance using Mean Squared Error (MSE) mse_ridge = mean_squared_error(y_test, y_pred_ridge)
mse_lasso = mean_squared_error(y_test, y_pred_lasso)


# Print the MSE for both models

print(f'Mean Squared Error for Ridge Regression: {mse_ridge:.2f}') print(f'Mean Squared Error for Lasso Regression: {mse_lasso:.2f}')

# Step 8: Predict the price of a house with 5 rooms using both models rooms = 5

price_ridge = ridge_regressor.predict([[rooms]]) # Predict using Ridge model price_lasso = lasso_regressor.predict([[rooms]]) # Predict using Lasso model

print(f'Predicted price for a house with {rooms} rooms using Ridge Regression:
${price_ridge[0]:.2f}')

print(f'Predicted price for a house with {rooms} rooms using Lasso Regression:
${price_lasso[0]:.2f}')
 
Q.2.	Write a python program to implement Linear SVM using UniversalBank.csv [15 M]


# Import necessary libraries import pandas as pd
from sklearn.model_selection import train_test_split from sklearn.svm import SVC
from sklearn.preprocessing import StandardScaler

from sklearn.metrics import accuracy_score, classification_report, confusion_matrix


# Step 1: Load the dataset

# Replace 'UniversalBank.csv' with the actual path to the dataset df = pd.read_csv('UniversalBank.csv')

# Step 2: Data Preprocessing # Check for missing values print(df.isnull().sum())

# Handling missing values if necessary (this is just an example) # df = df.fillna(df.mean()) # Or any other imputation strategy

# Convert categorical variables to numerical (if required)
 
# Assuming 'Personal.Loan' is the target variable

# If there are categorical features, we may need to encode them (e.g. 'Gender' or 'Education')

df = pd.get_dummies(df, drop_first=True)


# Step 3: Define Features (X) and Target (y)

# Assuming 'Personal.Loan' is the target variable (binary classification)

X = df.drop('Personal.Loan', axis=1) # Features

y = df['Personal.Loan'] # Target variable (whether the person has taken a loan or not)


# Step 4: Split the data into training and testing sets

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


# Step 5: Feature Scaling (important for SVM) scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train) X_test_scaled = scaler.transform(X_test)

# Step 6: Train Linear SVM model

svm_model = SVC(kernel='linear', random_state=42) svm_model.fit(X_train_scaled, y_train)
 
# Step 7: Make Predictions

y_pred = svm_model.predict(X_test_scaled)


# Step 8: Evaluate the model

accuracy = accuracy_score(y_test, y_pred) print(f'Accuracy: {accuracy * 100:.2f}%')

# Confusion Matrix print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred))


# Classification Report (Precision, Recall, F1-Score) print("Classification Report:") print(classification_report(y_test, y_pred))

