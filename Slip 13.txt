Slip 13 :


Q.1.	Create RNN model and analyze the Google stock price dataset. Find out increasing or decreasing trends of stock price for the next day


Python Code Example:

Step 1: Install Required Libraries

Make sure you have the required libraries installed:

bash
Copy code
pip install pandas numpy matplotlib yfinance tensorflow scikit-learn

Step 2: Import Necessary Libraries

python Copy code
import numpy as np import pandas as pd
import matplotlib.pyplot as plt import yfinance as yf
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
 
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout from sklearn.metrics import accuracy_score

Step 3: Download Google Stock Price Data

python Copy code
# Download Google stock data from Yahoo Finance (adjust the ticker if needed) df = yf.download('GOOGL', start='2010-01-01', end='2024-01-01')

# Check the first few rows of the data df.head()

Step 4: Preprocess the Data

We'll use the Closing Price of Google stock to predict the trends (increase or decrease) for the next day.

python Copy code
# Only use the 'Close' price for prediction df = df[['Close']]

# Normalize the data using MinMaxScaler scaler = MinMaxScaler(feature_range=(0, 1)) scaled_data = scaler.fit_transform(df)

# Create a function to prepare the data for RNN input def create_dataset(data, time_step=60):
X, y = [], []
for i in range(time_step, len(data)): X.append(data[i-time_step:i, 0])
y.append(1 if data[i, 0] > data[i-1, 0] else 0) # 1 for increase, 0 for decrease
return np.array(X), np.array(y)

# Prepare the data for training
X, y = create_dataset(scaled_data)
X = X.reshape(X.shape[0], X.shape[1], 1) # Reshape for RNN [samples, time_steps, features]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

Step 5: Build the RNN Model

We will create an RNN using LSTM (Long Short-Term Memory) layers, which are good for sequential data like stock prices.

python
 
Copy code
# Build the RNN model model = Sequential()

# Add LSTM layers
model.add(LSTM(units=50, return_sequences=True, input_shape=(X_train.shape[1], 1))) model.add(Dropout(0.2))
model.add(LSTM(units=50, return_sequences=False)) model.add(Dropout(0.2))

# Add the output layer
model.add(Dense(units=1, activation='sigmoid')) # Binary output: 1 (increase), 0 (decrease)

# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Train the model
model.fit(X_train, y_train, epochs=10, batch_size=32, validation_data=(X_test, y_test))

Step 6: Model Evaluation

After training the model, we'll evaluate it on the test data and check its accuracy.

python Copy code
# Evaluate the model on test data
loss, accuracy = model.evaluate(X_test, y_test) print(f'Test Accuracy: {accuracy * 100:.2f}%')

Step 7: Make Predictions for the Next Day

Now, we can use the trained model to predict the trend (increase or decrease) for the next day.

python Copy code
# Use the last 60 days of stock price data to predict the next day's trend last_60_days = scaled_data[-60:]
last_60_days = last_60_days.reshape(1, -1) last_60_days = last_60_days.reshape((1, 60, 1))

# Predict the trend (0 for decrease, 1 for increase) predicted_trend = model.predict(last_60_days) predicted_trend = 1 if predicted_trend[0][0] > 0.5 else 0

# Print the predicted trend if predicted_trend == 1:
print("The stock price is predicted to increase tomorrow.") else:
 
print("The stock price is predicted to decrease tomorrow.")

Step 8: Visualize the Results

You can plot the stock prices and predictions for a better understanding of the modelâ€™s performance.

python Copy code
# Plot the real stock prices vs the predicted trend predicted_stock_price = model.predict(X_test)
predicted_stock_price = (predicted_stock_price > 0.5) # Convert to 0 or 1

plt.figure(figsize=(10, 6))
plt.plot(y_test, color='blue', label='Real Stock Price Trend') plt.plot(predicted_stock_price, color='red', label='Predicted Stock Price Trend')
plt.title('Stock Price Trend Prediction') plt.xlabel('Days')
plt.ylabel('Trend (1 = Increase, 0 = Decrease)') plt.legend()
plt.show()



Q.2.	Write a python program to implement simple Linear Regression for predicting house
price


import pandas as pd import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Step 1: Load the dataset
# For simplicity, we'll use a synthetic dataset or you can replace it with an actual dataset (e.g., 'house_prices.csv')
# Example of a simple dataset with 'Area' (square footage) and 'Price'

# Sample data (replace this with your actual dataset) data = {
'Area': [1500, 1800, 2400, 3000, 3500, 4000, 4500, 5000, 5500, 6000],
'Price': [245000, 312000, 369000, 450000, 512000, 570000, 600000, 650000,
700000, 750000]
}

df = pd.DataFrame(data)

# Step 2: Prepare the data
X = df[['Area']] # Feature (independent variable) y = df['Price']	# Target (dependent variable)
 
# Step 3: Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 4: Create a Linear Regression model model = LinearRegression()

# Step 5: Train the model model.fit(X_train, y_train)

# Step 6: Make predictions on the test set y_pred = model.predict(X_test)

# Step 7: Evaluate the model
mse = mean_squared_error(y_test, y_pred) r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error: {mse}') print(f'R-squared: {r2}')

# Step 8: Visualize the results
plt.scatter(X_test, y_test, color='blue', label='Actual prices') plt.plot(X_test, y_pred, color='red', label='Regression line') plt.title('House Price Prediction')
plt.xlabel('Area (Square feet)') plt.ylabel('Price') plt.legend()
plt.show()

# Step 9: Predict the price for a new house (e.g., 2500 square feet) new_area = np.array([[2500]]) # Example: 2500 square feet predicted_price = model.predict(new_area)
print(f'Predicted price for a house with 2500 sq. feet:
${predicted_price[0]:,.2f}')
