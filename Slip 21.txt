Slip 21 :


Q.1.	Create a multiple linear regression model for house price dataset divide dataset into train and test data while giving it to model and predict prices of house.


# Import necessary libraries import pandas as pd
from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
 


# Step 1: Load the dataset

# You can replace this with your own dataset

# For this example, let's assume we're working with a dataset named 'house_prices.csv'

df = pd.read_csv('house_prices.csv')


# Step 2: Preprocess the data

# Assuming the dataset has columns like 'Size', 'Bedrooms', 'Age', 'Price' # Replace missing values or handle categorical variables if necessary
df = df.dropna() # Remove rows with missing values


# Step 3: Split the data into features (X) and target (y)

X = df[['Size', 'Bedrooms', 'Age']] # Features y = df['Price'] # Target

# Step 4: Split the data into training and testing sets (80% train, 20% test)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


# Step 5: Train the Multiple Linear Regression model model = LinearRegression()
model.fit(X_train, y_train)
 


# Step 6: Make predictions using the trained model y_pred = model.predict(X_test)

# Step 7: Evaluate the model's performance mse = mean_squared_error(y_test, y_pred) r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse}") print(f"RÂ² Score: {r2}")

# Step 8: Predict prices for a new house (example input)

new_house = pd.DataFrame({'Size': [2500], 'Bedrooms': [4], 'Age': [10]}) predicted_price = model.predict(new_house)
print(f"Predicted Price for the new house: ${predicted_price[0]:,.2f}")

Q.2.	Write a python program to implement Linear SVM using UniversalBank.csv. import pandas as pd
from sklearn.model_selection import train_test_split from sklearn.svm import SVC
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report # Step 1: Load the dataset
 
df = pd.read_csv('UniversalBank.csv')

# Step 2: Preprocess the data # Check for missing values print(df.isnull().sum())

# Drop rows with missing values (if any) df = df.dropna()

# Step 3: Feature selection
# Select relevant features (this may vary based on the dataset)
# Assuming 'Personal Loan' is the target variable, and the rest are features X = df.drop(columns=['Personal Loan'])
y = df['Personal Loan']

# Step 4: Encode categorical variables if needed
# For this example, we assume the dataset is already numeric or encoding is handled

# Step 5: Split the data into training and testing sets (80% train, 20% test) X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 6: Feature Scaling
# It is a good practice to scale the data for SVM scaler = StandardScaler()
X_train = scaler.fit_transform(X_train) X_test = scaler.transform(X_test)

# Step 7: Train the Linear SVM model svm_model = SVC(kernel='linear') svm_model.fit(X_train, y_train)

# Step 8: Make predictions
y_pred = svm_model.predict(X_test)

# Step 9: Evaluate the model's performance accuracy = accuracy_score(y_test, y_pred) conf_matrix = confusion_matrix(y_test, y_pred) class_report = classification_report(y_test, y_pred)

print(f"Accuracy: {accuracy}")
 
print(f"Confusion Matrix:\n{conf_matrix}") print(f"Classification Report:\n{class_report}")

