Slip 20 :

Q.1.	Implement Ridge Regression, Lasso regression model using boston_houses.csv and take only ‘RM’ and ‘Price’ of the houses. divide the data as training and testing data. Fit line using Ridge regression and to find price of a house if it contains 5 rooms. and compare results


# Import necessary libraries import pandas as pd
import numpy as np

from sklearn.model_selection import train_test_split from sklearn.linear_model import Ridge, Lasso from sklearn.metrics import mean_squared_error

# Step 1: Load the Dataset

# Assuming the dataset is in CSV format and located in the current directory df = pd.read_csv('boston_houses.csv') # Replace with your actual dataset path

# Step 2: Select Features

df = df[['RM', 'Price']] # Selecting only 'RM' (rooms) and 'Price' (house price)


# Step 3: Preprocess the Data

# Split the data into features (X) and target (y)
 
X = df[['RM']] # 'RM' represents the number of rooms y = df['Price'] # 'Price' represents the house price

# Split the data into training and testing sets (80% train, 20% test)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


# Step 4: Apply Ridge and Lasso Regression


# Ridge Regression

ridge = Ridge(alpha=1.0) # You can tune alpha for regularization strength ridge.fit(X_train, y_train)

# Lasso Regression

lasso = Lasso(alpha=0.1) # You can tune alpha for regularization strength lasso.fit(X_train, y_train)

# Step 5: Predict House Price for 5 Rooms

rooms = np.array([[5]]) # Predict for a house with 5 rooms


ridge_pred = ridge.predict(rooms) lasso_pred = lasso.predict(rooms)
 


# Step 6: Compare Results

print(f"Ridge Regression Prediction for 5 rooms: ${ridge_pred[0]:.2f}") print(f"Lasso Regression Prediction for 5 rooms: ${lasso_pred[0]:.2f}")

# Optional: Evaluate the models on test data ridge_test_pred = ridge.predict(X_test) lasso_test_pred = lasso.predict(X_test)

ridge_mse = mean_squared_error(y_test, ridge_test_pred) lasso_mse = mean_squared_error(y_test, lasso_test_pred)

print(f"Ridge Regression MSE on Test Data: {ridge_mse:.2f}") print(f"Lasso Regression MSE on Test Data: {lasso_mse:.2f}")



Q.2.	Write a python program to implement Decision Tree whether or not to play Tennis.


# Import necessary libraries import pandas as pd
from sklearn.tree import DecisionTreeClassifier
 
from sklearn.model_selection import train_test_split from sklearn.metrics import accuracy_score
from sklearn.preprocessing import LabelEncoder


# Step 1: Create the dataset data = {
'Outlook': ['Sunny', 'Sunny', 'Overcast', 'Rain', 'Rain', 'Rain', 'Overcast', 'Sunny', 'Sunny', 'Rain', 'Sunny', 'Overcast', 'Overcast', 'Rain'],

'Temperature': ['Hot', 'Hot', 'Hot', 'Mild', 'Cool', 'Cool', 'Cool', 'Mild', 'Mild', 'Mild', 'Hot', 'Mild', 'Mild', 'Mild'],

'Humidity': ['High', 'High', 'High', 'High', 'Normal', 'Normal', 'Normal', 'High', 'Normal', 'Normal', 'High', 'Normal', 'Normal', 'High'],

'Wind': ['Weak', 'Strong', 'Weak', 'Weak', 'Weak', 'Strong', 'Strong', 'Weak', 'Weak', 'Weak', 'Weak', 'Weak', 'Strong', 'Strong'],

'PlayTennis': ['No', 'No', 'Yes', 'Yes', 'Yes', 'No', 'Yes', 'No', 'Yes', 'Yes', 'Yes', 'Yes', 'Yes', 'No']

}


# Step 2: Convert to DataFrame df = pd.DataFrame(data)

# Step 3: Encode categorical variables using LabelEncoder encoder = LabelEncoder()
 
df['Outlook'] = encoder.fit_transform(df['Outlook']) df['Temperature'] = encoder.fit_transform(df['Temperature']) df['Humidity'] = encoder.fit_transform(df['Humidity']) df['Wind'] = encoder.fit_transform(df['Wind'])
df['PlayTennis'] = encoder.fit_transform(df['PlayTennis']) # Target variable


# Step 4: Split the data into features (X) and target (y)

X = df.drop('PlayTennis', axis=1) # Features y = df['PlayTennis']  # Target

# Step 5: Split the data into training and testing sets (80% train, 20% test)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


# Step 6: Train the Decision Tree model dtree = DecisionTreeClassifier() dtree.fit(X_train, y_train)

# Step 7: Predict using the trained model y_pred = dtree.predict(X_test)

# Step 8: Evaluate the model accuracy
 
accuracy = accuracy_score(y_test, y_pred)

print(f'Accuracy of Decision Tree Model: {accuracy * 100:.2f}%')


# Step 9: Print the Decision Tree rules from sklearn.tree import export_text
tree_rules = export_text(dtree, feature_names=list(X.columns)) print("\nDecision Tree Rules:\n")
print(tree_rules)






