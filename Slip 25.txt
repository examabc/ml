Slip 25 :


Q.1.	Write a python program to implement Polynomial Regression for house price dataset.


import numpy as np import pandas as pd
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression from sklearn.preprocessing import PolynomialFeatures
from sklearn.metrics import mean_squared_error, r2_score


# Step 1: Load the dataset

# Assuming the dataset has 'SquareFeet' and 'Price' columns (change based on actual dataset)

url = 'house_price_dataset.csv' # Replace with your actual dataset path data = pd.read_csv(url)

# Step 2: Preprocess the Data
 
print("First few rows of the dataset:") print(data.head())

# Assuming 'SquareFeet' is the feature and 'Price' is the target variable

X = data['SquareFeet'].values.reshape(-1, 1) # Reshaping to make it a 2D array for the model

y = data['Price'].values


# Step 3: Split the data into training and testing sets

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


# Step 4: Polynomial Feature Transformation (degree=4, you can change it) poly = PolynomialFeatures(degree=4)
X_poly_train = poly.fit_transform(X_train) X_poly_test = poly.transform(X_test)

# Step 5: Fit the Polynomial Regression Model (Linear Regression on transformed features)

model = LinearRegression() model.fit(X_poly_train, y_train)

# Step 6: Predict house prices
 
y_pred_train = model.predict(X_poly_train) y_pred_test = model.predict(X_poly_test)

# Step 7: Evaluate the Model

print("\nTrain Mean Squared Error:", mean_squared_error(y_train, y_pred_train)) print("Test Mean Squared Error:", mean_squared_error(y_test, y_pred_test)) print("\nTrain R2 Score:", r2_score(y_train, y_pred_train))
print("Test R2 Score:", r2_score(y_test, y_pred_test))


# Step 8: Visualize the Polynomial Regression results # Plotting the training data and model prediction
plt.scatter(X_train, y_train, color='blue', label='Training Data')

plt.plot(X_train, y_pred_train, color='red', label='Polynomial Regression Line (train)')


# Plotting the testing data and model prediction plt.scatter(X_test, y_test, color='green', label='Test Data')
plt.plot(X_test, y_pred_test, color='orange', label='Polynomial Regression Line (test)')


plt.title('Polynomial Regression for House Price Prediction') plt.xlabel('Square Feet')
plt.ylabel('Price') plt.legend()
 
plt.show()






Q.2.	Create a two layered neural network with relu and sigmoid activation function. [15 M]


# Import necessary libraries import numpy as np
import tensorflow as tf

from tensorflow.keras.models import Sequential from tensorflow.keras.layers import Dense
from tensorflow.keras.optimizers import Adam from sklearn.model_selection import train_test_split from sklearn.datasets import make_classification from sklearn.preprocessing import StandardScaler

# Step 1: Generate a synthetic binary classification dataset

X, y = make_classification(n_samples=1000, n_features=20, n_classes=2, random_state=42)


# Step 2: Scale the data (important for neural networks) scaler = StandardScaler()
 
X_scaled = scaler.fit_transform(X)


# Step 3: Split the dataset into training and testing sets

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)


# Step 4: Define the model model = Sequential()

# First hidden layer with ReLU activation function model.add(Dense(units=64, input_dim=X_train.shape[1], activation='relu'))

# Output layer with Sigmoid activation function for binary classification model.add(Dense(units=1, activation='sigmoid'))

# Step 5: Compile the model

model.compile(optimizer=Adam(), loss='binary_crossentropy', metrics=['accuracy'])


# Step 6: Train the model

history = model.fit(X_train, y_train, epochs=20, batch_size=32, validation_data=(X_test, y_test))


# Step 7: Evaluate the model on the test set
 
test_loss, test_accuracy = model.evaluate(X_test, y_test)


# Output results

print(f'Test Loss: {test_loss}') print(f'Test Accuracy: {test_accuracy}')

# Step 8: Make predictions (optional) y_pred = model.predict(X_test)
y_pred = (y_pred > 0.5) # Convert probabilities to binary (0 or 1)

